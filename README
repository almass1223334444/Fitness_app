Документация проекта "Управление расписанием фитнес-тренеров"
Описание
Проект представляет собой бэкенд-систему для управления расписанием фитнес-тренеров, разработанный с использованием Django и Django REST Framework (DRF). Он позволяет управлять пользователями (клиентами, тренерами и администраторами), информацией о тренерах, их расписаниями и записями на тренировки.

Технические требования
Python 3.8+
Django 3.2+
Django REST Framework 3.12+
Установка и настройка
Подготовка окружения
Установите Python 3.8 или выше на вашу систему.

Создайте виртуальное окружение и активируйте его:

Windows:

bash
Copy code
python -m venv venv
.\venv\Scripts\activate
macOS/Linux:

bash
Copy code
python3 -m venv venv
source venv/bin/activate
Установите необходимые зависимости:

bash
Copy code
pip install django djangorestframework
Запуск проекта
Клонируйте репозиторий проекта (предполагается, что вы создали его на GitHub или другом сервисе) или перейдите в каталог с проектом.
Примените миграции для создания структуры базы данных:
bash
Copy code
python manage.py makemigrations
python manage.py migrate
Запустите сервер разработки:
bash
Copy code
python manage.py runserver
Перейдите по адресу http://127.0.0.1:8000/ в вашем браузере для доступа к проекту.
Структура проекта
Приложения
schedule: Основное приложение проекта, содержащее модели, представления и сериализаторы для управления пользователями, тренерами и расписанием.
Основные модели
CustomUser: Модель пользователя с дополнительным полем для роли (клиент, тренер, админ).
Trainer: Модель фитнес-тренера с базовой информацией.
Gym: Модель зала, в котором тренер проводит тренировки.
Schedule: Модель расписания тренера.
API
Проект предоставляет REST API для управления ресурсами. Документация по API доступна по адресу http://127.0.0.1:8000/api/ после запуска проекта.

Разработка
Добавление новых моделей и API-эндпоинтов
Для добавления новых моделей определите их в models.py соответствующего приложения. После этого создайте сериализаторы в serializers.py и представления в views.py. Наконец, добавьте маршруты в urls.py для доступа к новым API-эндпоинтам.